//TASK 4

id INTEGER PRIMARY KEY
title TEXT
content TEXT

dependencies:
  flutter:
    sdk: flutter
  sqflite: ^2.3.0
  path_provider: ^2.1.2

import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';

void main() {
  runApp(const SQLiteSetupApp());
}

class SQLiteSetupApp extends StatefulWidget {
  const SQLiteSetupApp({super.key});

  @override
  State<SQLiteSetupApp> createState() => _SQLiteSetupAppState();
}

class _SQLiteSetupAppState extends State<SQLiteSetupApp> {
  Database? _database;
  String _status = "Initializing database...";

  @override
  void initState() {
    super.initState();
    _initDatabase();
  }

  /// Initialize and create notes.db with a notes table
  Future<void> _initDatabase() async {
    try {
      // Get path to the documents directory
      Directory documentsDir = await getApplicationDocumentsDirectory();
      String path = join(documentsDir.path, "notes.db");

      // Open or create the database
      _database = await openDatabase(
        path,
        version: 1,
        onCreate: (db, version) async {
          await db.execute('''
            CREATE TABLE notes(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              title TEXT,
              content TEXT
            )
          ''');
        },
      );

      setState(() {
        _status = "Database created successfully at:\n$path";
      });
    } catch (e) {
      setState(() {
        _status = "Error initializing database: $e";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SQLite Setup Demo',
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Task 4 â€“ SQLite Database Setup'),
          centerTitle: true,
        ),
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Text(
              _status,
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 16),
            ),
          ),
        ),
      ),
    );
  }
}


//_____________________________________________________________________________________________________
// TASK 5

import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  Database? db;
  List<Map> notes = [];

  @override
  void initState() {
    super.initState();
    openDB();
  }

  Future<void> openDB() async {
    db = await openDatabase(
      join(await getDatabasesPath(), 'notes.db'),
      version: 1,
      onCreate: (db, version) async {
        await db.execute('CREATE TABLE notes(id INTEGER PRIMARY KEY, title TEXT, content TEXT)');
      },
    );
    loadNotes();
  }

  Future<void> addNote() async {
    await db?.insert('notes', {'title': 'Note', 'content': 'Dummy content'});
    loadNotes();
  }

  Future<void> loadNotes() async {
    final data = await db?.query('notes');
    setState(() {
      notes = data ?? [];
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: const Text('SQLite Notes')),
        body: Column(
          children: [
            ElevatedButton(onPressed: addNote, child: const Text('Add Note')),
            ElevatedButton(onPressed: loadNotes, child: const Text('View Notes')),
            Expanded(
              child: ListView.builder(
                itemCount: notes.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(notes[index]['title']),
                    subtitle: Text(notes[index]['content']),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
//_____________________________________________________________________________________________
//TASK 6

import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  Database? db;
  List<Map<String, Object?>> notes = [];

  @override
  void initState() {
    super.initState();
    openDB();
  }

  Future<void> openDB() async {
    db = await openDatabase(
      join(await getDatabasesPath(), 'notes.db'),
      version: 1,
      onCreate: (db, version) async {
        await db.execute('CREATE TABLE notes(id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, content TEXT)');
      },
    );
    loadNotes();
  }

  Future<void> addNote() async {
    await db?.insert('notes', {'title': 'New note', 'content': 'Empty content'});
    loadNotes();
  }

  Future<void> loadNotes() async {
    final data = await db?.query('notes', orderBy: 'id DESC');
    setState(() {
      notes = List<Map<String, Object?>>.from(data ?? []);
    });
  }

  Future<void> updateNote(int id, String title, String content) async {
    await db?.update('notes', {'title': title, 'content': content}, where: 'id = ?', whereArgs: [id]);
    loadNotes();
  }

  Future<void> deleteNote(int id) async {
    await db?.delete('notes', where: 'id = ?', whereArgs: [id]);
    loadNotes();
  }
Future<void> showEditDialog(Map<String, Object?> note) async {
    final id = note['id'] as int;
    final titleCtrl = TextEditingController(text: note['title'] as String? ?? '');
    final contentCtrl = TextEditingController(text: note['content'] as String? ?? '');
    final result = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Edit Note'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(controller: titleCtrl, decoration: const InputDecoration(labelText: 'Title')),
            TextField(controller: contentCtrl, decoration: const InputDecoration(labelText: 'Content')),
          ],
        ),
        actions: [
          TextButton(onPressed: () => Navigator.of(ctx).pop(false), child: const Text('Cancel')),
          TextButton(
            onPressed: () async {
              await updateNote(id, titleCtrl.text, contentCtrl.text);
              Navigator.of(ctx).pop(true);
            },
            child: const Text('Save'),
          ),
        ],
      ),
    );
    if (result == true) {}
  }

  Future<void> confirmDelete(int id) async {
    final ok = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Delete note?'),
        content: const Text('This will permanently delete the note.'),
        actions: [
          TextButton(onPressed: () => Navigator.of(ctx).pop(false), child: const Text('Cancel')),
          TextButton(onPressed: () => Navigator.of(ctx).pop(true), child: const Text('Delete')),
        ],
      ),
    );
    if (ok == true) {
      await deleteNote(id);
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: const Text('Notes - Update & Delete')),
        body: Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(12.0),
              child: Row(
                children: [
                  ElevatedButton(onPressed: addNote, child: const Text('Add Note')),
                  const SizedBox(width: 12),
                  ElevatedButton(onPressed: loadNotes, child: const Text('Refresh')),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: notes.length,
                itemBuilder: (context, i) {
                  final item = notes[i];
                  final id = item['id'] as int?;
                  final title = item['title'] as String? ?? '';
                  final content = item['content'] as String? ?? '';
                  return ListTile(
                    title: Text(title),
                    subtitle: Text(content),
                    onTap: id == null ? null : () => showEditDialog(item),
                    trailing: IconButton(
                      icon: const Icon(Icons.delete),
                      onPressed: id == null ? null : () => confirmDelete(id),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}


























